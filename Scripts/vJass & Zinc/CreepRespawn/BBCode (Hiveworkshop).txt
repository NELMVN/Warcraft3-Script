[TABLE]
[TR]
[TD][/TD]

[TD][HEADING=1][COLOR=rgb(250, 197, 28)]Creep Respawn[/COLOR][/HEADING][/TD]

[TD][/TD]
[/TR]
[TR]
[TD][/TD]

[TD]
[TABLE]
[TR]
[TD][box=Description]A simple Creep Respawn System tailored for RPG maps. It does not requires [ICODE]SetUnitUserData[/ICODE] and [ICODE]GetUnitUserData[/ICODE]. As a result, it is compatible with any existing unit indexer.
[/box][/TD]
[TD][box=Libraries]
[TABLE]
[TR]
[TD][URL='https://github.com/nestharus/JASS/blob/master/jass/Systems/ConstantTimerLoop32/script.j'][COLOR=rgb(247, 218, 100)]ConstantTimerLoop32[/COLOR][/URL][/TD]
[TD][user=136670]Nestharus[/user][/TD]
[/TR]
[TR]
[TD](Optional) [URL='https://www.hiveworkshop.com/threads/snippet-registerevent-pack.250266/'][COLOR=rgb(247, 218, 100)]RegisterPlayerEvent[/COLOR][/URL][/TD]
[TD][user=145108]Bannar[/user][/TD]
[/TR]
[/TABLE]
[/box][/TD]
[/TR]
[/TABLE]


[TABLE]
[TR]
[TD][tabs]
[tab][tabheader][SIZE=1]⚪[/SIZE][/tabheader][/tab]
[tab][tabheader][ICODE]How to import[/ICODE][/tabheader]
[LIST=1]
[*]Duplicate the two custom abilities from the Object Editor, or create your own custom abilities as needed.
[*]Copy the [COLOR=rgb(247, 218, 100)]CreepRespawn[/COLOR], [COLOR=rgb(247, 218, 100)][URL='https://github.com/nestharus/JASS/blob/master/jass/Systems/ConstantTimerLoop32/script.j']CTL[/URL][/COLOR], [COLOR=rgb(247, 218, 100)][URL='https://www.hiveworkshop.com/threads/snippet-registerevent-pack.250266/']RegisterNativeEvent[/URL][/COLOR], and [COLOR=rgb(247, 218, 100)][URL='https://www.hiveworkshop.com/threads/snippet-registerevent-pack.250266/']RegisterPlayerEvent[/URL][/COLOR] script.
[*]You’re all set!
[/LIST]
[/tab]
[tab][tabheader][ICODE]Configuration[/ICODE][/tabheader]
[TABLE]
[TR]
[TD][CODE=JASS]private constant player CREEP_OWNER[/CODE][/TD]
[TD]Owner[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant string REVIVE_EFFECT[/CODE][/TD]
[TD]Model path for Revival special effect.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant integer CREEP_BOSS_DETECTOR[/CODE][/TD]
[TD]Custom ability for boss detection.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant integer CREEP_MINI_BOSS_DETECTOR[/CODE][/TD]
[TD]Custom ability for mini boss detection.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant real CREEP_DEFAULT_RESPAWN_DURATION[/CODE][/TD]
[TD]Default creep revival duration.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant real CREEP_BOSS_RESPAWN_DURATION[/CODE][/TD]
[TD]Boss revival duration.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant real CREEP_MINI_BOSS_RESPAWN_DURATION[/CODE][/TD]
[TD]Mini boss revival duration.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant boolean ALLOW_FADE_IN[/CODE][/TD]
[TD]Enable fade in effect for revived creeps.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]private constant integer ALPHA_INCREMENT[/CODE][/TD]
[TD]Increment for transparency effect.[/TD]
[/TR]
[/TABLE]
[/tab]
[tab][tabheader][ICODE]API[/ICODE][/tabheader]
[TABLE]
[TR]
[TD][CODE=JASS]function AddCreepRespawn takes unit whichCreep returns integer[/CODE][/TD]
[TD]Include a unit to the Creep Respawn System. The function returns the Creep Index associated with that unit.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]function AddCreepRespawnEx takes unit whichCreep, real duration returns integer[/CODE][/TD]
[TD]Include a unit to the Creep Respawn System with a custom duration. The function returns the Creep Index associated with that unit.[/TD]
[/TR]
[TR]
[TD][CODE=JASS]function SetCreepRespawn takes unit whichCreep, boolean enable returns boolean[/CODE][/TD]
[TD]Toggleable creep respawning. The function returns whether it succeeded or failed.[/TD]
[/TR]
[/TABLE]
[/tab]
[tab][tabheader][ICODE]Source Code[/ICODE][/tabheader]
[tabs]
[tab][tabheader][SIZE=2][COLOR=rgb(255, 255, 255)]1.31+[/COLOR][/SIZE][/tabheader][CODE=JASS]
library CreepRespawn initializer onInit /* v3.0.2
*************************************************************************************
*
*    A simple Creep Respawn System tailored for RPG maps. It does not requires
*    SetUnitUserData and GetUnitUserData. As a result, it is compatible with any
*    existing unit indexer.
*
*************************************************************************************
*
*   */ requires /*
*
*       */ CTL /*                      https://github.com/nestharus/JASS/blob/master/jass/Systems/ConstantTimerLoop32/script.j
*
*
*   */ optional /*
*
*       */ RegisterPlayerUnitEvent /*  https://www.hiveworkshop.com/threads/snippet-registerevent-pack.250266/
*
*
*************************************************************************************
*
*    NOTE: If you’re using an older version of Warcraft 3, change the values of
*          trn.red, trn.green, trn.blue, and trn.alphaMax to 255. The drawback is
*          that you can't save and load the RGB color of the creep.
*/
//! textmacro CREEP_RESPAWN_TRANSPARENCY
    set trn.red = BlzGetUnitIntegerField(I[creepIndex], UNIT_IF_TINTING_COLOR_RED)
    set trn.green = BlzGetUnitIntegerField(I[creepIndex], UNIT_IF_TINTING_COLOR_GREEN)
    set trn.blue = BlzGetUnitIntegerField(I[creepIndex], UNIT_IF_TINTING_COLOR_BLUE)
    set trn.alphaMax = BlzGetUnitIntegerField(I[creepIndex], UNIT_IF_TINTING_COLOR_ALPHA)
//! endtextmacro
/************************************************************************************
*
*   Configurations
*
************************************************************************************/
    globals
        // Owner
        private constant player     CREEP_OWNER                         = Player(PLAYER_NEUTRAL_AGGRESSIVE)
        // Revive Special Effect
        private constant string     REVIVE_EFFECT                       = "Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl"
        // Mini Boss and Boss Detector
        private constant integer    CREEP_BOSS_DETECTOR                 = 'A000'
        private constant integer    CREEP_MINI_BOSS_DETECTOR            = 'A001'
        // Creep Revival Durations
        private constant real       CREEP_DEFAULT_RESPAWN_DURATION      = 10
        private constant real       CREEP_BOSS_RESPAWN_DURATION         = 30
        private constant real       CREEP_MINI_BOSS_RESPAWN_DURATION    = 15
        // Fade In
        private constant boolean    ALLOW_FADE_IN                       = true
        private constant integer    ALPHA_INCREMENT                     = 5
/************************************************************************************
*
*   API
*   ---------
*
*   function AddCreepRespawn takes unit whichCreep returns integer
*       - Include a unit to the Creep Respawn System. The function returns the Creep
*         Index associated with that unit.
*
*   function AddCreepRespawnEx takes unit whichCreep, real duration returns integer
*       - Include a unit to the Creep Respawn System with a custom duration. The
*         function returns the Creep Index associated with that unit.
*
*   function SetCreepRespawn takes unit whichCreep, boolean enable returns boolean
*       - Toggleable creep respawning. The function returns whether it succeeded or
*         failed.
*
*************************************************************************************
*
*   Ignore these below.
*
************************************************************************************/
        private integer             CREEP_INDEXED_COUNT              = 0
        private real array          X // X Coord
        private real array          Y // Y Coord
        private real array          F // Unit Facing
        private integer array       U // Unit Type Id
        private real array          D // Duration
        private unit array          I // Creep
        private boolean array       B // Enable Revival
    endglobals
    private function getCreepDuration takes unit whichCreep returns real
        if GetUnitAbilityLevel(whichCreep, CREEP_BOSS_DETECTOR) > 0 then
            return CREEP_BOSS_RESPAWN_DURATION
        elseif GetUnitAbilityLevel(whichCreep, CREEP_MINI_BOSS_DETECTOR) > 0 then
            return CREEP_MINI_BOSS_RESPAWN_DURATION
        else
            return CREEP_DEFAULT_RESPAWN_DURATION
        endif
    endfunction
    private function storeCreepData takes unit whichCreep, real duration returns integer
        if GetOwningPlayer(whichCreep) == CREEP_OWNER then
            set CREEP_INDEXED_COUNT = CREEP_INDEXED_COUNT + 1
            set X[CREEP_INDEXED_COUNT] = GetUnitX(whichCreep)
            set Y[CREEP_INDEXED_COUNT] = GetUnitY(whichCreep)
            set F[CREEP_INDEXED_COUNT] = GetUnitFacing(whichCreep)
            set U[CREEP_INDEXED_COUNT] = GetUnitTypeId(whichCreep)
            set D[CREEP_INDEXED_COUNT] = duration
            set I[CREEP_INDEXED_COUNT] = whichCreep
            set B[CREEP_INDEXED_COUNT] = true
            call SetUnitUseFood(whichCreep, false)
            static if DEBUG_MODE then
                debug call AddSpecialEffect("buildings\\other\\CircleOfPower\\CircleOfPower.mdl", X[CREEP_INDEXED_COUNT], Y[CREEP_INDEXED_COUNT])
            endif
            return CREEP_INDEXED_COUNT
        endif
        return 0
    endfunction
    private function findCreepDataIndex takes unit whichCreep returns integer
        local integer count = 0
        loop
            exitwhen count == CREEP_INDEXED_COUNT
            set count = count + 1
            if I[count] == whichCreep then
                return count
            endif
        endloop
        return 0
    endfunction
    function AddCreepRespawn takes unit whichCreep returns integer
        return storeCreepData(whichCreep, getCreepDuration(whichCreep))
    endfunction
    function AddCreepRespawnEx takes unit whichCreep, real duration returns integer
        return storeCreepData(whichCreep, duration)
    endfunction
    function SetCreepRespawn takes unit whichCreep, boolean enable returns boolean
        local integer creepIndex
        if GetOwningPlayer(whichCreep) == CREEP_OWNER then
            set creepIndex = findCreepDataIndex(whichCreep)
            if creepIndex > 0 then
                set B[creepIndex] = enable
                return true
            endif
        endif
        return false
    endfunction
    static if ALLOW_FADE_IN then
        private struct transparent extends array
            integer red
            integer blue
            integer green
            integer alpha
            integer alphaMax
            unit unit
            implement CTLExpire
                if this.alpha >= this.alphaMax then
                    call SetUnitVertexColor(this.unit, this.red, this.green, this.blue, this.alphaMax)
                    set this.red = 0
                    set this.blue = 0
                    set this.green = 0
                    set this.alpha = 0
                    set this.alphaMax = 0
                    set this.unit = null
                    call this.destroy()
                else
                    set this.alpha = this.alpha + ALPHA_INCREMENT
                    call SetUnitVertexColor(this.unit, this.red, this.green, this.blue, this.alpha)
                endif
            implement CTLEnd
        endstruct
    endif
    private struct creepRevival extends array
        real duration
        integer creepData
        integer uId
        implement CTL
            local real x
            local real y
            local real f
            local integer creepIndex
            static if ALLOW_FADE_IN then
                local transparent trn
            endif
        implement CTLExpire
            set creepIndex = this.creepData
            if B[creepIndex] then
                if this.duration <= 0 then
                    // Retrieve the X and Y coordinates as well as the unit’s facing direction.
                    set x = X[creepIndex]
                    set y = Y[creepIndex]
                    set f = F[creepIndex]
                    if IsUnitType(I[creepIndex], UNIT_TYPE_HERO) then
                        // Revive the Creep Hero
                        call ReviveHero(I[creepIndex], x, y, false)
                        call DestroyEffect(AddSpecialEffectTarget(REVIVE_EFFECT, I[creepIndex], "origin"))
                    else
                        // Substitute the new unit with the old unit.
                        set I[creepIndex] = CreateUnit(CREEP_OWNER, this.uId, x, y, f)
                        call DestroyEffect(AddSpecialEffectTarget(REVIVE_EFFECT, I[creepIndex], "origin"))
                    endif
                    static if ALLOW_FADE_IN then
                        set trn = transparent.create()
                        set trn.unit = I[creepIndex]
                        set trn.alpha = 0
                        //! runtextmacro CREEP_RESPAWN_TRANSPARENCY()
                        call SetUnitVertexColor(trn.unit, trn.red, trn.green, trn.blue, trn.alpha)
                    endif
                    // Data cleanup
                    set this.duration = 0
                    set this.creepData = 0
                    set this.uId = 0
                    call destroy()
                else
                    set this.duration = this.duration - 0.031250000
                endif
            else
                // Creep is no longer revivable.
                set this.duration = 0
                set this.creepData = 0
                set this.uId = 0
                call destroy()
            endif
        implement CTLEnd
    endstruct
    static if LIBRARY_RegisterPlayerUnitEvent then
        private function onDeath takes nothing returns nothing
    else
        private function onDeath_ takes nothing returns boolean
    endif
        local unit Creep = GetTriggerUnit()
        local integer creepId
        local creepRevival this
        if GetOwningPlayer(Creep) == CREEP_OWNER then
            set creepId = findCreepDataIndex(Creep)
            if creepId > 0 then
                set this = creepRevival.create()
                set this.duration = D[creepId]
                set this.uId = U[creepId]
                set this.creepData = creepId
            endif
        endif
        set Creep = null
        static if not LIBRARY_RegisterPlayerUnitEvent then
            return false
        endif
    endfunction
    private function registerCreepData takes nothing returns nothing
        call AddCreepRespawn(GetFilterUnit())
    endfunction
    private function initRegisterCreepData takes nothing returns nothing
        // Register all created creeps
        call GroupEnumUnitsOfPlayer(bj_lastCreatedGroup, CREEP_OWNER, Filter(function registerCreepData))
    endfunction
    private function onInit takes nothing returns nothing
        static if LIBRARY_RegisterPlayerUnitEvent then
            call RegisterPlayerUnitEvent(CREEP_OWNER, EVENT_PLAYER_UNIT_DEATH, function onDeath)
        else
            local trigger trg = CreateTrigger()
            call TriggerRegisterPlayerUnitEvent(trg, CREEP_OWNER, EVENT_PLAYER_UNIT_DEATH, null)
            call TriggerAddCondition(trg, Filter(function onDeath_))
        endif
        call initRegisterCreepData()
    endfunction
endlibrary
[/CODE]
[/tab]
[tab][tabheader][SIZE=2][COLOR=rgb(255, 255, 255)]Older patch[/COLOR][/SIZE][/tabheader]
[box=⚠️ IMPORTANT NOTE ⚠️]If you’re using an older version of Warcraft 3, change the values of [ICODE]trn.red[/ICODE], [ICODE]trn.green[/ICODE], [ICODE]trn.blue[/ICODE], and [ICODE]trn.alphaMax[/ICODE] to [ICODE]255[/ICODE]. The drawback is that you can't save and load the RGB color of the creep.
[/box]

[CODE=JASS]
library CreepRespawn initializer onInit /* v3.0.2
*************************************************************************************
*
*    A simple Creep Respawn System tailored for RPG maps. It does not requires
*    SetUnitUserData and GetUnitUserData. As a result, it is compatible with any
*    existing unit indexer.
*
*************************************************************************************
*
*   */ requires /*
*
*       */ CTL /*                      https://github.com/nestharus/JASS/blob/master/jass/Systems/ConstantTimerLoop32/script.j
*
*
*   */ optional /*
*
*       */ RegisterPlayerUnitEvent /*  https://www.hiveworkshop.com/threads/snippet-registerevent-pack.250266/
*
*
*************************************************************************************
*
*    NOTE: If you’re using an older version of Warcraft 3, change the values of
*          trn.red, trn.green, trn.blue, and trn.alphaMax to 255. The drawback is
*          that you can't save and load the RGB color of the creep.
*/
//! textmacro CREEP_RESPAWN_TRANSPARENCY
    set trn.red = 255
    set trn.green = 255
    set trn.blue = 255
    set trn.alphaMax = 255
//! endtextmacro
/************************************************************************************
*
*   Configurations
*
************************************************************************************/
    globals
        // Owner
        private constant player     CREEP_OWNER                         = Player(PLAYER_NEUTRAL_AGGRESSIVE)
        // Revive Special Effect
        private constant string     REVIVE_EFFECT                       = "Abilities\\Spells\\Human\\Resurrect\\ResurrectTarget.mdl"
        // Mini Boss and Boss Detector
        private constant integer    CREEP_BOSS_DETECTOR                 = 'A000'
        private constant integer    CREEP_MINI_BOSS_DETECTOR            = 'A001'
        // Creep Revival Durations
        private constant real       CREEP_DEFAULT_RESPAWN_DURATION      = 10
        private constant real       CREEP_BOSS_RESPAWN_DURATION         = 30
        private constant real       CREEP_MINI_BOSS_RESPAWN_DURATION    = 15
        // Fade In
        private constant boolean    ALLOW_FADE_IN                       = true
        private constant integer    ALPHA_INCREMENT                     = 5
/************************************************************************************
*
*   API
*   ---------
*
*   function AddCreepRespawn takes unit whichCreep returns integer
*       - Include a unit to the Creep Respawn System. The function returns the Creep
*         Index associated with that unit.
*
*   function AddCreepRespawnEx takes unit whichCreep, real duration returns integer
*       - Include a unit to the Creep Respawn System with a custom duration. The
*         function returns the Creep Index associated with that unit.
*
*   function SetCreepRespawn takes unit whichCreep, boolean enable returns boolean
*       - Toggleable creep respawning. The function returns whether it succeeded or
*         failed.
*
*************************************************************************************
*
*   Ignore these below.
*
************************************************************************************/
        private integer             CREEP_INDEXED_COUNT              = 0
        private real array          X // X Coord
        private real array          Y // Y Coord
        private real array          F // Unit Facing
        private integer array       U // Unit Type Id
        private real array          D // Duration
        private unit array          I // Creep
        private boolean array       B // Enable Revival
    endglobals
    private function getCreepDuration takes unit whichCreep returns real
        if GetUnitAbilityLevel(whichCreep, CREEP_BOSS_DETECTOR) > 0 then
            return CREEP_BOSS_RESPAWN_DURATION
        elseif GetUnitAbilityLevel(whichCreep, CREEP_MINI_BOSS_DETECTOR) > 0 then
            return CREEP_MINI_BOSS_RESPAWN_DURATION
        else
            return CREEP_DEFAULT_RESPAWN_DURATION
        endif
    endfunction
    private function storeCreepData takes unit whichCreep, real duration returns integer
        if GetOwningPlayer(whichCreep) == CREEP_OWNER then
            set CREEP_INDEXED_COUNT = CREEP_INDEXED_COUNT + 1
            set X[CREEP_INDEXED_COUNT] = GetUnitX(whichCreep)
            set Y[CREEP_INDEXED_COUNT] = GetUnitY(whichCreep)
            set F[CREEP_INDEXED_COUNT] = GetUnitFacing(whichCreep)
            set U[CREEP_INDEXED_COUNT] = GetUnitTypeId(whichCreep)
            set D[CREEP_INDEXED_COUNT] = duration
            set I[CREEP_INDEXED_COUNT] = whichCreep
            set B[CREEP_INDEXED_COUNT] = true
            call SetUnitUseFood(whichCreep, false)
            static if DEBUG_MODE then
                debug call AddSpecialEffect("buildings\\other\\CircleOfPower\\CircleOfPower.mdl", X[CREEP_INDEXED_COUNT], Y[CREEP_INDEXED_COUNT])
            endif
            return CREEP_INDEXED_COUNT
        endif
        return 0
    endfunction
    private function findCreepDataIndex takes unit whichCreep returns integer
        local integer count = 0
        loop
            exitwhen count == CREEP_INDEXED_COUNT
            set count = count + 1
            if I[count] == whichCreep then
                return count
            endif
        endloop
        return 0
    endfunction
    function AddCreepRespawn takes unit whichCreep returns integer
        return storeCreepData(whichCreep, getCreepDuration(whichCreep))
    endfunction
    function AddCreepRespawnEx takes unit whichCreep, real duration returns integer
        return storeCreepData(whichCreep, duration)
    endfunction
    function SetCreepRespawn takes unit whichCreep, boolean enable returns boolean
        local integer creepIndex
        if GetOwningPlayer(whichCreep) == CREEP_OWNER then
            set creepIndex = findCreepDataIndex(whichCreep)
            if creepIndex > 0 then
                set B[creepIndex] = enable
                return true
            endif
        endif
        return false
    endfunction
    static if ALLOW_FADE_IN then
        private struct transparent extends array
            integer red
            integer blue
            integer green
            integer alpha
            integer alphaMax
            unit unit
            implement CTLExpire
                if this.alpha >= this.alphaMax then
                    call SetUnitVertexColor(this.unit, this.red, this.green, this.blue, this.alphaMax)
                    set this.red = 0
                    set this.blue = 0
                    set this.green = 0
                    set this.alpha = 0
                    set this.alphaMax = 0
                    set this.unit = null
                    call this.destroy()
                else
                    set this.alpha = this.alpha + ALPHA_INCREMENT
                    call SetUnitVertexColor(this.unit, this.red, this.green, this.blue, this.alpha)
                endif
            implement CTLEnd
        endstruct
    endif
    private struct creepRevival extends array
        real duration
        integer creepData
        integer uId
        implement CTL
            local real x
            local real y
            local real f
            local integer creepIndex
            static if ALLOW_FADE_IN then
                local transparent trn
            endif
        implement CTLExpire
            set creepIndex = this.creepData
            if B[creepIndex] then
                if this.duration <= 0 then
                    // Retrieve the X and Y coordinates as well as the unit’s facing direction.
                    set x = X[creepIndex]
                    set y = Y[creepIndex]
                    set f = F[creepIndex]
                    if IsUnitType(I[creepIndex], UNIT_TYPE_HERO) then
                        // Revive the Creep Hero
                        call ReviveHero(I[creepIndex], x, y, false)
                        call DestroyEffect(AddSpecialEffectTarget(REVIVE_EFFECT, I[creepIndex], "origin"))
                    else
                        // Substitute the new unit with the old unit.
                        set I[creepIndex] = CreateUnit(CREEP_OWNER, this.uId, x, y, f)
                        call DestroyEffect(AddSpecialEffectTarget(REVIVE_EFFECT, I[creepIndex], "origin"))
                    endif
                    static if ALLOW_FADE_IN then
                        set trn = transparent.create()
                        set trn.unit = I[creepIndex]
                        set trn.alpha = 0
                        //! runtextmacro CREEP_RESPAWN_TRANSPARENCY()
                        call SetUnitVertexColor(trn.unit, trn.red, trn.green, trn.blue, trn.alpha)
                    endif
                    // Data cleanup
                    set this.duration = 0
                    set this.creepData = 0
                    set this.uId = 0
                    call destroy()
                else
                    set this.duration = this.duration - 0.031250000
                endif
            else
                // Creep is no longer revivable.
                set this.duration = 0
                set this.creepData = 0
                set this.uId = 0
                call destroy()
            endif
        implement CTLEnd
    endstruct
    static if LIBRARY_RegisterPlayerUnitEvent then
        private function onDeath takes nothing returns nothing
    else
        private function onDeath_ takes nothing returns boolean
    endif
        local unit Creep = GetTriggerUnit()
        local integer creepId
        local creepRevival this
        if GetOwningPlayer(Creep) == CREEP_OWNER then
            set creepId = findCreepDataIndex(Creep)
            if creepId > 0 then
                set this = creepRevival.create()
                set this.duration = D[creepId]
                set this.uId = U[creepId]
                set this.creepData = creepId
            endif
        endif
        set Creep = null
        static if not LIBRARY_RegisterPlayerUnitEvent then
            return false
        endif
    endfunction
    private function registerCreepData takes nothing returns nothing
        call AddCreepRespawn(GetFilterUnit())
    endfunction
    private function initRegisterCreepData takes nothing returns nothing
        // Register all created creeps
        call GroupEnumUnitsOfPlayer(bj_lastCreatedGroup, CREEP_OWNER, Filter(function registerCreepData))
    endfunction
    private function onInit takes nothing returns nothing
        static if LIBRARY_RegisterPlayerUnitEvent then
            call RegisterPlayerUnitEvent(CREEP_OWNER, EVENT_PLAYER_UNIT_DEATH, function onDeath)
        else
            local trigger trg = CreateTrigger()
            call TriggerRegisterPlayerUnitEvent(trg, CREEP_OWNER, EVENT_PLAYER_UNIT_DEATH, null)
            call TriggerAddCondition(trg, Filter(function onDeath_))
        endif
        call initRegisterCreepData()
    endfunction
endlibrary
[/CODE]
[/tab]
[/tabs]
[/tab]
[/tabs][/TD]
[/TR]
[/TABLE]


[TABLE]
[TR]
[TD][tabs]
[tab][tabheader][SIZE=2]⚪[/SIZE][/tabheader][/tab]
[tab][tabheader][ICODE]Changelog[/ICODE][/tabheader]
[COLOR=rgb(250, 197, 28)]v3.0.2[/COLOR]
[LIST]
[*]Replaced [ICODE]//! novjass[/ICODE] with [ICODE]//! textmacro CREEP_RESPAWN_TRANSPARENCY[/ICODE] in order to easily access the [ICODE]trn[/ICODE] values.
[/LIST]

[COLOR=rgb(250, 197, 28)]v3.0.1[/COLOR]
[LIST]
[*]Added BBCode (for Hiveworkshop)
[*]Fixed Documentation.
[*][ICODE]SetUnitVertexColor(this.unit, this.red, this.green, this.blue, this.alpha)[/ICODE] to [ICODE]SetUnitVertexColor(this.unit, this.red, this.green, this.blue, this.alphaMax)[/ICODE]
[/LIST]

[COLOR=rgb(250, 197, 28)]v3.0[/COLOR]
[LIST]
[*]Initial release (on Hiveworkshop).
[*]Changed [ICODE]scope[/ICODE] to [ICODE]library[/ICODE].
[*]Added API.
[*]Removed the [ICODE]NewTable[/ICODE] library. Use a global variable array instead.
[*]Since it has its own unit indexing, it can no longer rely on [ICODE]SetUnitUserData()[/ICODE] and [ICODE]GetUnitUserData()[/ICODE]. Consequently, it is compatible with any existing unit indexer.
[/LIST]

[COLOR=rgb(250, 197, 28)]v2.0[/COLOR]
[LIST]
[*]Replaced [ICODE]TimerUtils[/ICODE] library with [ICODE]CTL (ConstantTimerLoop)[/ICODE] for better performance.
[*]Changed [ICODE]library[/ICODE] to [ICODE]scope[/ICODE].
[*]Temporarily removed [ICODE]UnitDex; Unit Indexer[/ICODE] will be added soon.
[/LIST]

[COLOR=rgb(250, 197, 28)]v1.0[/COLOR]
[LIST]
[*]Initial release (on GitHub).
[/LIST]
[/tab]
[/tabs][/TD]
[/TR]
[/TABLE]
[/TD]

[TD][/TD]
[/TR]
[TR]
[TD][/TD]

[TD][RIGHT][SIZE=1][COLOR=rgb(250, 197, 28)]v3.0.2[/COLOR][/SIZE][/RIGHT][/TD]
[TD][/TD]
[/TR]
[/TABLE]
