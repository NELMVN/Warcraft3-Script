//! zinc
library GameClock { /* v1.0.0.3
*************************************************************************************
*
*    Game Clock
*        by nel
*
*       It allows you format the time and get the elapsed time.
*
************************************************************************************
*
*   SETTING
*
*/
    public {
        constant string delimiter = " : ";
    }
/*
************************************************************************************
*
*    Functions
*
*        function FormatTime takes real seconds returns string
*            -   It returns time as hh/mm/ss format.
*
*        function GetElapsedTime takes nothing returns real
*            -   It returns elapsed time.
*
*        function GetElapsedTimeFormatted takes nothing returns string
*            -   It returns elapsed time as hh/mm/ss format.
*
***********************************************************************************/

    private {
        constant timer TIMER = CreateTimer();
 
        module inc { private static method onInit() {
            TimerStart(TIMER, 100000000, true, null);
        }}
     
        struct Z extends array { module inc; }
    }
 
    public {
        function FormatTime( real seconds ) -> string {
            integer s = R2I(ModuloReal(seconds, 60));
            integer m = R2I(ModuloReal(seconds, 3600) / 60);
            integer h = R2I(seconds / 3600);
            string format = "";
         
            //! textmacro GAMECLOCK_TimeFormat takes Time, delimiter
            if( $Time$ < 10 ) {
                format = format + "0" + I2S($Time$) $delimiter$;
            } else {
                format = format + I2S($Time$) $delimiter$;
            }
            //! endtextmacro
            //! runtextmacro GAMECLOCK_TimeFormat("h", "+delimiter")
            //! runtextmacro GAMECLOCK_TimeFormat("m", "+delimiter")
            //! runtextmacro GAMECLOCK_TimeFormat("s", "")
             
            return format;
        }

        function GetElapsedTime() -> real {
            return TimerGetElapsed(TIMER);
        }

        function GetElapsedTimeFormatted() -> string {
            return FormatTime(TimerGetElapsed(TIMER));
        }
    }
}
//! endzinc
